import tkinter as tk
from tkinter import ttk, messagebox
import sqlite3
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart

# Establish connection to SQLite database
conn = sqlite3.connect('receipts.db')
c = conn.cursor()

# Create receipt table if not exists
c.execute('''CREATE TABLE IF NOT EXISTS receipts
             (id INTEGER PRIMARY KEY, employee_pin TEXT, customer_name TEXT, payment_amount REAL,
              payment_method TEXT, phone_number TEXT)''')

# Define employee information
employees = {
    "1023": "Jershlin Paul J",
    "1401": "Ganika P K"
}

def generate_receipt():
    # Retrieve input values
    pin = pin_entry.get()
    
    # Check PIN and generate receipt if it matches
    if pin in employees:  # Check if the entered PIN matches any employee's PIN
        customer_name = customer_name_entry.get()
        payment_amount = payment_amount_entry.get()
        payment_method = payment_method_var.get()
        phone_number = phone_number_entry.get()
        employee_name = employees[pin]

        # Create receipt content
        receipt_content = f"--------- Receipt ---------\n"
        receipt_content += f"Customer Name: {customer_name}\n"
        receipt_content += f"Payment Amount: {payment_amount}\n"
        receipt_content += f"Payment Method: {payment_method}\n"
        receipt_content += f"Phone Number: {phone_number}\n"
        receipt_content += f"Employee: {employee_name}\n"
        receipt_content += f"----------------------------\n"

        # Display receipt
        receipt_label.config(text=receipt_content, fg='black')
    else:
        receipt_label.config(text="Invalid PIN. Please enter the correct PIN.", fg='black')

def add_to_database():
    # Retrieve input values
    pin = pin_entry.get()
    employee_name = employees.get(pin, "")
    customer_name = customer_name_entry.get()
    payment_amount = payment_amount_entry.get()
    payment_method = payment_method_var.get()
    phone_number = phone_number_entry.get()

    # Insert receipt into database
    c.execute("INSERT INTO receipts (employee_pin, customer_name, payment_amount, payment_method, phone_number) VALUES (?, ?, ?, ?, ?)",
              (pin, customer_name, payment_amount, payment_method, phone_number))
    conn.commit()
    receipt_added_label.config(text="Receipt added to database.", bg='white', fg='black')
    show_database_details()  # Refresh the displayed database details

def show_database_details():
    # Clear previous entries in the treeview
    for row in database_treeview.get_children():
        database_treeview.delete(row)

    # Retrieve database details
    c.execute("SELECT * FROM receipts")
    rows = c.fetchall()

    # Display database details in the treeview
    for row in rows:
        database_treeview.insert('', 'end', values=row)

def delete_selected_entry():
    # Get the selected item from the treeview
    selected_item = database_treeview.selection()
    if selected_item:
        # Extract the ID of the selected item
        selected_id = database_treeview.item(selected_item, 'values')[0]
        # Delete the corresponding entry from the database
        c.execute("DELETE FROM receipts WHERE id=?", (selected_id,))
        conn.commit()
        receipt_added_label.config(text="Selected entry deleted.", bg='white', fg='black')
        show_database_details()  # Refresh the displayed database details
    else:
        receipt_added_label.config(text="No entry selected.", bg='white', fg='black')

def delete_all_entries():
    # Delete all entries from the database
    c.execute("DELETE FROM receipts")
    conn.commit()
    receipt_added_label.config(text="All entries deleted.", bg='white', fg='black')
    show_database_details()  # Refresh the displayed database details

def print_receipt():
    # Retrieve receipt content from the label
    receipt_content = receipt_label.cget("text")
    # Print the receipt content
    print(receipt_content)

def send_email():
    # Get recipient email address
    recipient_email = email_entry.get()

    # Retrieve receipt content
    receipt_content = receipt_label.cget("text")

    # Check if recipient email is provided
    if recipient_email:
        # Email configuration
        sender_email = "your_email@gmail.com"  # Replace with your Gmail address
        sender_password = "your_password"       # Replace with your Gmail password

        # Create a MIMEText object
        message = MIMEMultipart()
        message["From"] = sender_email
        message["To"] = recipient_email
        message["Subject"] = "Payment Receipt"

        # Add receipt content to the email body
        message.attach(MIMEText(receipt_content, "plain"))

        # Create SMTP session
        with smtplib.SMTP_SSL("smtp.gmail.com", 465) as server:
            # Login to the server
            server.login(sender_email, sender_password)
            # Send email
            server.sendmail(sender_email, recipient_email, message.as_string())
        
        messagebox.showinfo("Email Sent", "Receipt sent successfully!")
    else:
        messagebox.showerror("Error", "Please provide a recipient email address.")

# Create main window
root = tk.Tk()
root.title("Payment Receipt Generator")

# Set window size
root.geometry("900x650")  # Width x Height

# Set background color
root.configure(background='pink')

# Create labels and entries for input with white background
tk.Label(root, text="Employee PIN:", bg='pink').grid(row=0, column=0, sticky="w", padx=5, pady=5)
pin_entry = tk.Entry(root, show="*", bg='white')
pin_entry.grid(row=0, column=1, padx=5, pady=5)

tk.Label(root, text="Customer Name:", bg='pink').grid(row=1, column=0, sticky="w", padx=5, pady=5)
customer_name_entry = tk.Entry(root, bg='white')
customer_name_entry.grid(row=1, column=1, padx=5, pady=5)

tk.Label(root, text="Payment Amount:", bg='pink').grid(row=2, column=0, sticky="w", padx=5, pady=5)
payment_amount_entry = tk.Entry(root, bg='white')
payment_amount_entry.grid(row=2, column=1, padx=5, pady=5)

tk.Label(root, text="Payment Method:", bg='pink').grid(row=3, column=0, sticky="w", padx=5, pady=5)
payment_method_var = tk.StringVar(root)
payment_method_var.set("Cash")  # Default value
payment_method_options = ["Cash", "Credit Card", "Debit Card", "UPI"]
payment_method_dropdown = tk.OptionMenu(root, payment_method_var, *payment_method_options)
payment_method_dropdown.config(bg='white')
payment_method_dropdown.grid(row=3, column=1, padx=5, pady=5)

tk.Label(root, text="Phone Number:", bg='pink').grid(row=4, column=0, sticky="w", padx=5, pady=5)
phone_number_entry = tk.Entry(root, bg='white')
phone_number_entry.grid(row=4, column=1, padx=5, pady=5)

tk.Label(root, text="Recipient Email:", bg='pink').grid(row=5, column=0, sticky="w", padx=5, pady=5)
email_entry = tk.Entry(root, bg='white')
email_entry.grid(row=5, column=1, padx=5, pady=5)

# Create button to generate receipt with black text
generate_button = tk.Button(root, text="Generate Receipt", command=generate_receipt, bg='white', fg='black')
generate_button.grid(row=6, columnspan=2, pady=10)

# Button to show database details
show_database_details_button = tk.Button(root, text="Show Database Details", command=show_database_details, bg='white', fg='black')
show_database_details_button.grid(row=7, columnspan=2, pady=10)

# Button to add receipt to database with black text
add_to_database_button = tk.Button(root, text="Add Payment Receipt to Database", command=add_to_database, bg='white', fg='black')
add_to_database_button.grid(row=7, columnspan=2, pady=10)

# Button to delete selected database entry with black text
delete_selected_entry_button = tk.Button(root, text="Delete Selected Entry", command=delete_selected_entry, bg='white', fg='black')
delete_selected_entry_button.grid(row=9, columnspan=2, pady=10)

# Button to delete all database entries with black text
delete_all_entries_button = tk.Button(root, text="Delete All Entries", command=delete_all_entries, bg='white', fg='black')
delete_all_entries_button.grid(row=10, columnspan=2, pady=10)

# Button to print receipt with black text
print_receipt_button = tk.Button(root, text="Print Receipt", command=print_receipt, bg='white', fg='black')
print_receipt_button.grid(row=11, columnspan=2, pady=10)

# Button to send receipt via email with black text
send_email_button = tk.Button(root, text="Send Receipt via Email", command=send_email, bg='white', fg='black')
send_email_button.grid(row=12, columnspan=2, pady=10)

# Create treeview to display database details with columns
database_treeview = ttk.Treeview(root, columns=("ID", "Employee PIN", "Customer Name", "Payment Amount", "Payment Method", "Phone Number"), show="headings")

# Set column headings
database_treeview.heading("ID", text="ID")
database_treeview.heading("Employee PIN", text="Employee PIN")
database_treeview.heading("Customer Name", text="Customer Name")
database_treeview.heading("Payment Amount", text="Payment Amount")
database_treeview.heading("Payment Method", text="Payment Method")
database_treeview.heading("Phone Number", text="Phone Number")

# Set column widths
database_treeview.column("ID", width=50)
database_treeview.column("Employee PIN", width=100)
database_treeview.column("Customer Name", width=150)
database_treeview.column("Payment Amount", width=100)
database_treeview.column("Payment Method", width=100)
database_treeview.column("Phone Number", width=100)

# Add scrollbar
scrollbar = ttk.Scrollbar(root, orient="vertical", command=database_treeview.yview)
scrollbar.grid(row=1, column=3, rowspan=10, sticky="ns")
database_treeview.configure(yscrollcommand=scrollbar.set)

# Grid the treeview
database_treeview.grid(row=1, column=2, rowspan=10, padx=10, pady=10)

# Label to display confirmation of receipt added to database with black text
receipt_added_label = tk.Label(root, text="", bg='pink', fg='black')
receipt_added_label.grid(row=14, columnspan=2, pady=10)

# Label to display receipt with white background
receipt_label = tk.Label(root, text="", wraplength=400, justify="left", bg='white', bd=2, relief="solid", fg='black')
receipt_label.grid(row=11, column=0, columnspan=2, padx=10, pady=10)

root.mainloop()

# Close database connection when the Tkinter application is closed
conn.close()
